{"pageProps":{"post":{"slug":"rxjs-transformation-operators","id":"6243292371d5634a6689c511","uuid":"ed43ed5b-e854-4025-8f45-c06ead730fa4","title":"Comparing RxJS Transformation Operators","html":"<p>RxJS is a powerful reactive programming library that focuses on the use of Observables. It provides developers with a variety of tools, including many types of operators. This read will explore some of the most common and useful <a href=\"https://www.learnrxjs.io/learn-rxjs/operators/transformation\">transformation</a> operators RxJS offers.</p><h2 id=\"mergemap\">mergeMap()</h2><p>The mergeMap() transformation operator maps each value to an observable and then flattens the observables by subscribing internally, emitting the results; mergeMap() flattens the inner observable as they occur.</p><p>Each time the source observable emits a value, the function you supply to mergeMap() is invoked. The observable returned by this function is then subscribed to internally. From that point forward, whenever the inner observable emits a value, mergeMap() also emits that value. </p><p>There are unlimited inner observables, so remember to clean up these inner observables to avoid memory leaks (i.e. use take() or takeUntil()).</p><figure class=\"kg-card kg-image-card\"><img src=\"https://static.tevpro.com/content/images/2023/01/image-2.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1280\" height=\"740\" srcset=\"https://static.tevpro.com/content/images/size/w600/2023/01/image-2.png 600w, https://static.tevpro.com/content/images/size/w1000/2023/01/image-2.png 1000w, https://static.tevpro.com/content/images/2023/01/image-2.png 1280w\" sizes=\"(min-width: 720px) 720px\"></figure><h2 id=\"switchmap\">switchMap()</h2><p>The switchMap() operator waits for the previous Observable to complete before creating the next one. Only maintains 1 active subscription at a time. Switch to a new observable on emissions.</p><p>This is the safest operator for flattening. It is harder to create leaks than using mergeMap(). It is best to avoid switchMap() when it's cancellation could have undesired effects (i.e. saves/POST). </p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://static.tevpro.com/content/images/2022/12/image-5.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1280\" height=\"740\" srcset=\"https://static.tevpro.com/content/images/size/w600/2022/12/image-5.png 600w, https://static.tevpro.com/content/images/size/w1000/2022/12/image-5.png 1000w, https://static.tevpro.com/content/images/2022/12/image-5.png 1280w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Source: https://rxjs.dev/api/operators/switchMap</figcaption></figure><h2 id=\"concatmap\">concatMap()</h2><p>The concatMap() operator maps each value to an observable and then flattens the results. All inner observables are queued and subscribed to in order until the previous completes. </p><p><strong>Note:</strong> concatMap() is equivalent to mergeMap with concurrency parameter set to 1.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://static.tevpro.com/content/images/2022/12/image-6.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1280\" height=\"740\" srcset=\"https://static.tevpro.com/content/images/size/w600/2022/12/image-6.png 600w, https://static.tevpro.com/content/images/size/w1000/2022/12/image-6.png 1000w, https://static.tevpro.com/content/images/2022/12/image-6.png 1280w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Source: https://rxjs.dev/api/operators/concatMap</figcaption></figure><h2 id=\"exhaustmap\">exhaustMap()</h2><p>The exhaustMap() operator ignores emissions when an inner observable is active.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://static.tevpro.com/content/images/2022/12/image-7.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1280\" height=\"740\" srcset=\"https://static.tevpro.com/content/images/size/w600/2022/12/image-7.png 600w, https://static.tevpro.com/content/images/size/w1000/2022/12/image-7.png 1000w, https://static.tevpro.com/content/images/2022/12/image-7.png 1280w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Source: https://rxjs.dev/api/operators/exhaustMap</figcaption></figure><!--kg-card-begin: markdown--><h1 id=\"final-thoughts\">Final thoughts</h1>\n<p>RxJS provides developers with many tools to control and mitigate reactive programming, some of which are transformation <a href=\"https://rxjs.dev/api/operators\">operators</a>. We hope you enjoyed taking a deeper dive into what RxJS has to offer and hope you follow us on Twitter and Linkedin to stay updated with new content.</p>\n<p>Tevpro is a custom software development firm founded in Houston, Texas. We'd love to work with <a href=\"https://www.tevpro.com/contact-us\">you or help answer any questions</a>.</p>\n<!--kg-card-end: markdown-->","comment_id":"6243292371d5634a6689c511","feature_image":"https://images.unsplash.com/photo-1535231540604-72e8fbaf8cdb?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxMTc3M3wwfDF8c2VhcmNofDF8fHRyYW5zZm9ybXxlbnwwfHx8fDE2NTUyNTA2ODA&ixlib=rb-1.2.1&q=80&w=2000","featured":false,"visibility":"public","email_recipient_filter":"all","created_at":"2022-03-29T10:43:31.000-05:00","updated_at":"2023-02-07T06:35:42.000-06:00","published_at":"2023-01-03T14:14:26.000-06:00","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"61cdfe0271d5634a6689b6c2","name":"RxJS","slug":"rxjs","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.tevpro.com/tag/rxjs/"},{"id":"614576dd0192c52f3a498d45","name":"Development","slug":"development","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"Software Development","meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.tevpro.com/tag/development/"}],"authors":[{"id":"6148bcd27536011e09a9d4a1","name":"Kim Pham","slug":"kimpham","profile_image":"https://ghost.tevpro.com/content/images/2022/01/IMG_0155.jpg","cover_image":null,"bio":"Senior Front-end Web Developer","website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://ghost.tevpro.com/author/kimpham/"}],"primary_author":{"id":"6148bcd27536011e09a9d4a1","name":"Kim Pham","slug":"kimpham","profile_image":"https://static.tevpro.com/content/images/2022/01/IMG_0155.jpg","cover_image":null,"bio":"Senior Front-end Web Developer","website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://ghost.tevpro.com/author/kimpham/"},"primary_tag":{"id":"61cdfe0271d5634a6689b6c2","name":"RxJS","slug":"rxjs","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.tevpro.com/tag/rxjs/"},"url":"https://ghost.tevpro.com/blog/rxjs-transformation-operators/","excerpt":"RxJS is a powerful reactive programming library that focuses on the use of\nObservables. It provides developers with a variety of tools, including many\ntypes of operators. This read will explore some of the most common and useful \ntransformation [https://www.learnrxjs.io/learn-rxjs/operators/transformation] \noperators RxJS offers.\n\nmergeMap()\nThe mergeMap() transformation operator maps each value to an observable and then\nflattens the observables by subscribing internally, emitting the results;\nm","reading_time":2,"access":true,"send_email_when_published":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"Comparing Common RxJS Transformation Operators ","meta_description":"We explore some of the most common and useful transformation operators RxJS offers like mergeMap(), switchMap(), concatMap(), and exhaustMap(). ","email_subject":null,"frontmatter":null}},"__N_SSG":true}