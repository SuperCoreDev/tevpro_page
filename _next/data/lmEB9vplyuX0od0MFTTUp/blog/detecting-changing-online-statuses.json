{"pageProps":{"post":{"slug":"detecting-changing-online-statuses","id":"640b7fbf37f4e8f598cee034","uuid":"c9608f2a-334a-4e44-835b-f52fc85454b8","title":"Dynamic Online/Offline Detection of Network Status with RxJS","html":"<p>The network status of an application is a crucial component of an application and its features. Being aware of any changes to the network status serves as a highly beneficial monitor for UI/UX purposes and provides the best user experience possible. When crafting highly powerful web applications, we may need to detect a user's network status for many reasons, such as to determine when to use cached data or to simply display a message/new screen to the user. </p><h3 id=\"challenges-in-detecting-network-status\">Challenges in detecting network status</h3><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Navigator/onLine\">N<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Navigator/onLine\">avigator.onLine</a></a> can serve as a useful tool in determining a user's online status, but it is <strong>not a reliable source of truth if used alone</strong>, especially if a user is connected to a <a href=\"https://en.wikipedia.org/wiki/Virtual_private_network\">VPN</a>.</p><!--kg-card-begin: markdown--><blockquote>\n<p>&quot;In Chrome and Safari, if the browser is not able to connect to a local area network (LAN) or a router, it is offline; all other conditions return true. So while you can assume that the browser is offline when it returns a false value, you cannot assume that a true value necessarily means that the browser can access the internet. You could be getting false positives, such as in cases where the computer is running a virtualization software that has virtual ethernet adapters that are always &quot;connected.&quot; Therefore, if you really want to determine the online status of the browser, you should develop additional means for checking.&quot; -MDN Webdocs</p>\n</blockquote>\n<!--kg-card-end: markdown--><p>Not only is navigator.onLine unreliable as a standalone tool, but it is also <strong>only a one-time check</strong>. One could use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/setTimeout\">setTimeout()</a> to accomplish multiple/periodic checks, but VeloMax recommends using the popular <a href=\"https://rxjs.dev/guide/overview\">RxJS</a> library to better \"listen\" to network statuses.</p><p>Furthermore, to more accurately identify when a user is online or offline, it is suggested to use both the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/offline_event\">window offline</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/online_event\">window online</a> events in conjunction with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Navigator/onLine\">navigator.onLine</a>. Navigator.onLine returns the status of the browser, whereas the window online/offline event is fired when the browser has gained/lost access to the network. Used together, your application will be able to detect network changes more precisely.</p><h2 id=\"implementation\">Implementation</h2><p>In your <a href=\"https://angular.io/\">Angular</a> application, create a Network <a href=\"https://angular.io/guide/architecture-services\">Service</a> to hold the network status's value. In this service, you will create an <a href=\"https://rxjs.dev/guide/observable\">Observable</a> that encompasses the status/value by <a href=\"https://rxjs.dev/api/operators/merge\"><a href=\"https://rxjs.dev/api/operators/merge\">merging</a> multiple observables</a> (window offline event, window online event, and navigator.onLine) into a single observable value. Once created, you are able to inject this service into various parts of your application and use this value by <a href=\"https://rxjs.dev/guide/observable\"><a href=\"https://rxjs.dev/deprecations/subscribe-arguments\">subscribing to the observable</a></a>! </p><h3 id=\"network-service-and-the-isonline-observable\">Network Service and the isOnline$ Observable</h3><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">import { Injectable } from '@angular/core';\nimport { merge, fromEvent, map, Observable, Observer } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NetworkService {\n  isOnline$ = merge(\n    fromEvent(window, 'online').pipe(map(() =&gt; true)),\n    fromEvent(window, 'offline').pipe(map(() =&gt; false)),\n    new Observable((sub: Observer&lt;boolean&gt;) =&gt; {\n      sub.next(navigator.onLine);\n      sub.complete();\n    }),\n  );\n\n  constructor() {}\n}\n</code></pre><figcaption>isOnline$ Observable inside the NetworkService</figcaption></figure><h3 id=\"using-the-value-in-the-isonline-observable\">Using the value in the isOnline$ Observable</h3><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">import { Component, OnInit } from '@angular/core';\nimport { NetworkService } from './shared/services/networkService/network.service';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  constructor(\n    readonly networkService: NetworkService,\n  ) {}\n\n   ngOnInit() {\n      this.networkService.isOnline$\n      .subscribe(result =&gt; {\n      \tif (result) {\n        \t// If user is online \n        }\n        else {\n        \t// If user is offline \n        }\n      });\n  }\n}\n</code></pre><figcaption>isOnline$ subscribed to for usage of its value</figcaption></figure><h3 id=\"conclusion\">Conclusion</h3><p>Detecting a user's network status and the change in their status can be tricky. It is exceedingly advantageous for any application to iron out its custom implementation and accuracy of the user's online status to provide an enhanced user experience. </p><p>Tevpro is a custom software development firm founded in Houston, Texas. We work with companies of all sizes to create powerful web, cross-platform, and native applications. We'd love to work with you or help answer any <a href=\"https://www.tevpro.com/contact-us\">questions</a>.</p><h3 id=\"sources\">Sources</h3><!--kg-card-begin: markdown--><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Virtual_private_network\">https://en.wikipedia.org/wiki/Virtual_private_network</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/setTimeout\">https://developer.mozilla.org/en-US/docs/Web/API/setTimeout</a></li>\n<li><a href=\"https://rxjs.dev/\">https://rxjs.dev/</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/online_event\">https://developer.mozilla.org/en-US/docs/Web/API/Window/online_event</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Navigator/onLine\">https://developer.mozilla.org/en-US/docs/Web/API/Navigator/onLine</a></li>\n<li><a href=\"https://angular.io/\">https://angular.io/</a></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"640b7fbf37f4e8f598cee034","feature_image":"https://images.unsplash.com/photo-1451187580459-43490279c0fa?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxMTc3M3wwfDF8c2VhcmNofDIwfHxpbnRlcm5ldHxlbnwwfHx8fDE2Nzg0ODI4MzU&ixlib=rb-4.0.3&q=80&w=2000","featured":false,"visibility":"public","email_recipient_filter":"all","created_at":"2023-03-10T13:06:39.000-06:00","updated_at":"2023-05-30T07:31:29.000-05:00","published_at":"2023-03-20T14:54:37.000-05:00","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"61cdfe0271d5634a6689b6c2","name":"RxJS","slug":"rxjs","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.tevpro.com/tag/rxjs/"},{"id":"614576dd0192c52f3a498d28","name":"Angular","slug":"angular","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.tevpro.com/tag/angular/"},{"id":"614576dd0192c52f3a498d45","name":"Development","slug":"development","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"Software Development","meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.tevpro.com/tag/development/"},{"id":"629a32f6747d11e1211cfef7","name":"Technology","slug":"technology","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.tevpro.com/tag/technology/"}],"authors":[{"id":"6148bcd27536011e09a9d4a1","name":"Kim Pham","slug":"kimpham","profile_image":"https://ghost.tevpro.com/content/images/2022/01/IMG_0155.jpg","cover_image":null,"bio":"Senior Front-end Web Developer","website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://ghost.tevpro.com/author/kimpham/"}],"primary_author":{"id":"6148bcd27536011e09a9d4a1","name":"Kim Pham","slug":"kimpham","profile_image":"https://static.tevpro.com/content/images/2022/01/IMG_0155.jpg","cover_image":null,"bio":"Senior Front-end Web Developer","website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://ghost.tevpro.com/author/kimpham/"},"primary_tag":{"id":"61cdfe0271d5634a6689b6c2","name":"RxJS","slug":"rxjs","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.tevpro.com/tag/rxjs/"},"url":"https://ghost.tevpro.com/blog/detecting-changing-online-statuses/","excerpt":"The network status of an application is a crucial component of an application\nand its features. Being aware of any changes to the network status serves as a\nhighly beneficial monitor for UI/UX purposes and provides the best user\nexperience possible. When crafting highly powerful web applications, we may need\nto detect a user's network status for many reasons, such as to determine when to\nuse cached data or to simply display a message/new screen to the user. \n\nChallenges in detecting network stat","reading_time":3,"access":true,"send_email_when_published":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"Dynamic Online/Offline Detection of Network Status with RxJS","meta_description":"The network status of an application is a crucial component of an application and its features. Being aware of any changes to the network status serves as a highly beneficial monitor, especially for UI/UX purposes. ","email_subject":null,"frontmatter":null}},"__N_SSG":true}